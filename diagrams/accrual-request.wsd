@startuml TransferConnect: Accrual Request
skinparam ParticipantPadding 10
skinparam BoxPadding 5
hide footbox

participant BankClient as "Bank Client"

box "Bank Server Service" #LightYellow
  participant BankServer as "**Bank Server**" #white
  participant BankDB as "Bank Database"
end box

box "TransferConnect" #LightBlue
  participant TransferConnect as "**TransferConnect**" #white
  participant TCDB as "TC Database"
end box

participant LoyaltyProgram as "Loyalty Program"

note over BankServer: Possesses:\n\t- Unique code ""partner_code"" representing the bank.
note over BankServer,TransferConnect
Both BankServer and TransferConnect possess 2 shared keys:
\t- ""tc_api_key"": API Key to authenticate bank server requests to TransferConnect
\t- ""bank_webhook_key"": Key to authenticate TransferConnect requests to a bank's webhook.
The bank's webhook URL is preshared with TransferConnect.
endnote

group User making Accrual Request
    BankClient -> BankServer: User makes accrual request:\n""POST {bank server URL}/api/transfers""
    BankServer ->> BankServer: Server conducts necessary authorisation checks
    BankServer ->> BankServer: Verify Client has enough points.
    alt not enough points
        BankClient <<-- BankServer: HTTP 402 Payment Required, ""{error: 'insufficient points'}""
    else enough points
        BankServer ->> BankDB: Store the accrual request, with:\n\t- ""status: pending""\n\t- ""sentToTC: true""
        BankServer <-- BankDB: Request stored, with reference number ""{ref_id}""
        BankClient <<-- BankServer: HTTP 202 Accepted
        BankServer ->> TransferConnect: Forward the accrual request, along with ""partner_code""\nand ""tc_api_key"".
        alt TC is up
            TransferConnect ->> TCDB: Query for ""{partner_code: {partner_code}, api_key: {tc_api_key}}""
            TCDB -> TCDB: Check if partner exists\nwith correct credentials
            alt credentials valid
                TransferConnect <-- TCDB: Partner exists
                TransferConnect -> TransferConnect: Verify accrual request
                alt valid accrual request
                    TransferConnect ->> TCDB: Store POSTed data with ""{status: 'unsent'}""
                    BankServer <<-- TransferConnect: HTTP 201 Created
                else invalid accrual request
                    BankServer <<-- TransferConnect: HTTP 400 Bad Request
                    BankServer ->> BankDB: Update status with error
                    hnote over BankServer: Notify user of erroneous accrual\ne.g. Email, notification.
            end
            else credentials invalid
                TransferConnect <-- TCDB: Partner doesn't exist
                BankServer <<-- TransferConnect: HTTP 401 Unauthorised
                BankServer ->> BankDB: Update accrual request with ""sentToTC: false"".
                BankServer -> BankServer: Log error -- this has to be resolved manually.
            end
        else no response from TC (TC down)
            BankServer -> BankServer: Timeout on waiting for response.
            BankServer ->> BankDB: Update accrual request with ""sentToTC: false"".
        end
    end
end

group Bank making daily checks of unsent requests
    BankServer ->> BankDB: Query all data with ""{ sentToTC: false }""
    BankServer <-- BankDB: (response)
    group for each unsent accrual:
        BankServer ->> TransferConnect: (Retry request forwarding)
        note over BankServer,TransferConnect: (Refer to the above for Server-TC interactions.)
    end
end

group TransferConnect making daily Accrual Request to LoyaltyProgram
    TransferConnect ->> TCDB: Query all data with ""{status: 'unsent'}""
    TransferConnect <-- TCDB: (data with ""{status: 'unsent'}"")
    TransferConnect ->> TransferConnect: Collate into single accrual file with CSV format
    TransferConnect ->> LoyaltyProgram: SFTP_POST single accrual file
    TransferConnect ->> TCDB: Set all data with ""{status: 'unsent'}"" to ""{status: 'pending'}""
end

@enduml